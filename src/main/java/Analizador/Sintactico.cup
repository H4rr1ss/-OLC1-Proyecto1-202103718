package Analizador;
import SIGUIENTES_202103718.*;
import TRANSICIONES_202103718.*;
import AFD_202103718.*;
import edu.usac.olc1.proyecto1.*;
import java_cup.runtime.*;
import java.util.*;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

parser code {:
    public DefConjuntos defC = new DefConjuntos();
    
    // COMPONENTES PARA TABLA DE SIGUIENTES
    public tablaSig objSig = new tablaSig();
    public static String cadenaERnombre = "";

    // COMPONENTES PARA EL ARBOL SINTACTICO
    public static  int cont = 1;
    public static int IDS = 1;
    public static Nodo Raiz;

    public static void graficarArbol(Nodo act, String nombre){
        FileWriter fichero = null;
        PrintWriter pw = null;
        try {
            fichero = new FileWriter("src/main/java/ARBOLES_202103718/" + nombre + ".dot");
            pw = new PrintWriter(fichero);
            pw.println("digraph G{");
            pw.println("rankdir=UD");
            pw.println("node[shape=record]");
            pw.println("concentrate=true");
            pw.println(act.getCodigoInterno());
            pw.println("}");
        } catch (Exception e) {
            System.out.println("error, no se realizo el archivo"+e);
        } finally {
            try {
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
        //para compilar el archivo dot y obtener la imagen
        try {
            //direcci贸n doonde se ecnuentra el compilador de graphviz
            String dotPath = "C:\\Program Files\\Graphviz\\bin\\dot.exe";
            //direcci贸n del archivo dot
            String fileInputPath = "src/main/java/ARBOLES_202103718/" + nombre + ".dot";
            //direcci贸n donde se creara la magen
            String fileOutputPath = "src/main/java/ARBOLES_202103718/" + nombre + ".jpg";
            //tipo de convers贸n
            String tParam = "-Tjpg";
            String tOParam = "-o";

            String[] cmd = new String[5];
            cmd[0] = dotPath;
            cmd[1] = tParam;
            cmd[2] = fileInputPath;
            cmd[3] = tOParam;
            cmd[4] = fileOutputPath;

            Runtime rt = Runtime.getRuntime();

            rt.exec(cmd);

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
        }
    }
:};




terminal NCONJ, LLAVE_A, DP, GUION, MAYOR, PC, CONCAT, DISYUN, KLEEN, PORCENT, S_MAS, S_UNA, LLAVE_C, STR, SIMB, CONJASCII;

terminal String LETMAY, LETMIN, VARIABLE, TILDE, DIG, COMA;

non terminal INICIO, BODY, AUXCONV, DEFCONJS, DEFER, TESTER, NOTACION, NOTACIONCONV, LETRA;
non terminal String SD, SU, TE;
non terminal Nodo T, ER;

start with INICIO;

INICIO ::= BODY
            {: 
            dbAFD.returnAFD();
            System.out.println(" \nya salio :) \n---------->\n"); 
            :};

//CUERPO DE LA GRAMATICA
BODY ::= LLAVE_A DEFCONJS DEFER PORCENT PORCENT PORCENT PORCENT TESTER LLAVE_C
            {:
                parser.defC.DefinicionDeConjuntos();
            :};
//LLAVE_A DEFCONJS DEFER PORCENT PORCENT PORCENT PORCENT TESTER LLAVE_C



//BLOQUE [DEFINICION DE CONJUNTOS]
DEFCONJS ::= DEFCONJS NCONJ DP VARIABLE:a GUION MAYOR NOTACION:b PC
           {: String c = b.toString(); parser.defC.add(a,c); :}
           | NCONJ DP VARIABLE:a GUION MAYOR NOTACION:b PC
           {: String c = b.toString(); parser.defC.add(a,c); :}
            ;

NOTACION ::= CONJASCII:c
            {: RESULT = c.toString(); :}
            | LETMIN:a TILDE:b LETMIN:c
            {: RESULT = a.toString()+b.toString()+c.toString(); :}
            | LETMAY:a TILDE:b LETMAY:c
            {: RESULT = a.toString()+b.toString()+c.toString(); :}
            | DIG:a TILDE:b DIG:c
            {: RESULT = a.toString()+b.toString()+c.toString(); :}
            | NOTACIONCONV:n
            {: RESULT = n; System.out.println(n.toString()); :}
            ;

NOTACIONCONV ::= AUXCONV:a LETRA:c
              {: String res = a.toString()+c.toString(); 
                 RESULT = res;
              :}
               | LETRA:l
               {: 
                RESULT = l.toString(); 
              :}
              ;

AUXCONV ::= AUXCONV:a LETRA:b COMA:c
       {: RESULT = a.toString()+b.toString()+c.toString(); :}
       | LETRA:b COMA:c
       {: RESULT = b.toString()+c.toString(); :}
       ;

LETRA ::= LETMAY: ly
        {: RESULT = ly.toString(); :}
        | LETMIN: ln
        {: RESULT = ln.toString(); :}
        | DIG: d
        {: RESULT = d.toString(); :}
        ;



//BLOQUE [DEFICION DE EXPRESIONES REGUALES EN POLACO]
DEFER ::= DEFER VARIABLE:nombre GUION MAYOR ER:valor PC
        {:
            String prim = IDS+"";
            String ult = IDS+"";
            String prime;
            String ulti;
            Nodo nuevofinal = new Nodo(null, null, "#", parser.cont, parser.IDS, "N", prim, ult);
            parser.objSig.addElementH(nuevofinal.getPrimero(), "-");

            parser.cont++;
            if (valor.getAnulable().equals("A")){
                prime = valor.getPrimero() + ult;
            }else{
                prime = valor.getPrimero();
            }
            ulti = nuevofinal.getUltimo();
            Nodo nuevaraiz = new Nodo(valor, nuevofinal, ".", parser.cont, 0, "N", prime,ulti);
            parser.Raiz = nuevaraiz;
            graficarArbol(nuevaraiz, nombre);
            IDS = 1;

            //TABLA DE SIGUIENTES------------------------------>
            parser.objSig.addElementH(nuevaraiz.getHizq().getUltimo(), nuevaraiz.getHder().getPrimero());
            cadenaERnombre += "#,";
            parser.objSig.Graphviz(cadenaERnombre, nombre);
            //------------------------------------------------->

            //TABLA DE TRANSICIONES---------------------------->
            dbTablaTransicion TT = new dbTablaTransicion();
            parser.objSig.asignacionTablaTransiciones(TT, cadenaERnombre);
            TT.TablaTransiciones(nuevaraiz.getPrimero(), nombre);
            //------------------------------------------------->

            //CREACION OBJ AFD--------------------------------->
            List<String> statusA =  TT.estadosDeAceptacion();
            Map<String, List<String[]>> transitions = TT.modificacionTransiciones();
            HashMap<String, List<String>> conjunts = parser.defC.DefinicionDeConjuntos();
            AFD objAFD = new AFD(nombre, "S0", statusA, transitions);
            objAFD.graphvizAFD();
            objAFD.setConjuntos(conjunts);
            dbAFD.InsertAFD(objAFD);
            objAFD.graficar_AFND(nombre, nuevaraiz);
            //-------------------------------------------------->

            //-----------------REINICIO DE VARIABLES-----------------
            //SIGUIENTES
            cadenaERnombre = "";
            parser.objSig.limpiarMap();
            //TRANSICIONES
            TT.limipiarMap_t();
            
        :}

        | VARIABLE:nombre GUION MAYOR ER:valor PC
        {:
            String prim = IDS+"";
            String ult = IDS+"";
            String prime;
            String ulti;
            Nodo nuevofinal = new Nodo(null, null, "#", parser.cont, parser.IDS, "N", prim, ult);
            parser.objSig.addElementH(nuevofinal.getPrimero(), "-");

            parser.cont++;
            if (valor.getAnulable().equals("A")){
                prime = valor.getPrimero() + ult;
            }else{
                prime = valor.getPrimero();
            }
            ulti = nuevofinal.getUltimo();
            Nodo nuevaraiz = new Nodo(valor, nuevofinal, ".", parser.cont, 0, "N", prime,ulti);
            parser.Raiz = nuevaraiz;
            graficarArbol(nuevaraiz, nombre);
            IDS = 1;

            //TABLA DE SIGUIENTES------------------------------>
            parser.objSig.addElementH(nuevaraiz.getHizq().getUltimo(), nuevaraiz.getHder().getPrimero());
            cadenaERnombre += "#,";
            parser.objSig.Graphviz(cadenaERnombre, nombre);
            //------------------------------------------------->

            //TABLA DE TRANSICIONES---------------------------->
            dbTablaTransicion TT = new dbTablaTransicion();
            parser.objSig.asignacionTablaTransiciones(TT, cadenaERnombre);
            TT.TablaTransiciones(nuevaraiz.getPrimero(), nombre);
            //------------------------------------------------->

            //CREACION OBJ AFD--------------------------------->
            List<String> statusA =  TT.estadosDeAceptacion();
            Map<String, List<String[]>> transitions = TT.modificacionTransiciones();
            HashMap<String, List<String>> conjunts = parser.defC.DefinicionDeConjuntos();
            AFD objAFD = new AFD(nombre, "S0", statusA, transitions);
            objAFD.graphvizAFD();
            objAFD.setConjuntos(conjunts);
            dbAFD.InsertAFD(objAFD);
            objAFD.graficar_AFND(nombre, nuevaraiz);
            //-------------------------------------------------->
            
            //-----------------REINICIO DE VARIABLES-----------------
            //SIGUIENTES
            cadenaERnombre = "";
            parser.objSig.limpiarMap();
            //TRANSICIONES
            TT.limipiarMap_t();
        :}
        ;

ER ::= SD:c ER:a ER:b
    {:
        String valor = c.toString();

        // VERIFICA QUE TIPO DE SD ES
        if (valor.equals("|")){
            String an;
            if (a.getAnulable().equals("A") || b.getAnulable().equals("A")){
                an = "A";
            }else{
                an = "N";
            }
            String prim = a.getPrimero() + b.getPrimero();
            String ult = a.getUltimo() + b.getUltimo();
            Nodo dualER = new Nodo(a,b,valor,parser.cont, 0, an, prim, ult);
            parser.cont++;
            RESULT = dualER;

        }
        if (valor.equals(".")){
            String an;
            String prim;
            String ult;

            if (a.getAnulable().equals("A") && b.getAnulable().equals("A")){
                an = "A";
            }else{
                an = "N";
            }
            if (a.getAnulable().equals("A")){
                prim = a.getPrimero() + b.getPrimero();
            }else {
                prim = a.getPrimero();
            }
            if (b.getAnulable().equals("A")){
                ult = a.getUltimo() + b.getUltimo();
            }else {
                ult = b.getUltimo();
            }
            Nodo dualER = new Nodo(a,b,valor,parser.cont, 0, an, prim, ult);
            parser.cont++;

           // TABLA DE SIGUIENTES
            parser.objSig.addElementH(dualER.getHizq().getUltimo(), dualER.getHder().getPrimero());

            RESULT = dualER;
        }

        
    :}
    | T:t
    {: RESULT = t; :}
    ;

T ::= SU:a ER:b
        {:
            // METODO DEL ARBOL
            String valor = a.toString();

            // VERIFICA QUE TIPO DE SU ES
            if (valor.equals("+")){                
                String prim = b.getPrimero();
                String ult = b.getUltimo();
                Nodo indER = new Nodo(b,null,valor,parser.cont, 0, "N", prim, ult);
                parser.cont++;

                //TABLA DE SIGUIENTES
                parser.objSig.addElementH(indER.getHizq().getPrimero(), indER.getHizq().getUltimo());

                RESULT = indER;
            }
            if (valor.equals("*")){
                String prim = b.getPrimero();
                String ult = b.getUltimo();
                Nodo indER = new Nodo(b,null,valor,parser.cont, 0, "A", prim, ult);
                parser.cont++;

                // TABLA DE SIGUIENTES
                parser.objSig.addElementH(indER.getHizq().getPrimero(), indER.getHizq().getUltimo());

                RESULT = indER;
            }
            if (valor.equals("?")){
                String prim = b.getPrimero();
                String ult = b.getUltimo();
                Nodo indER = new Nodo(b,null,valor,parser.cont, 0, "A", prim, ult);
                parser.cont++;
                RESULT = indER;
            }
            
        :}
    | TE:s
    {:
        // METODO DEL ARBOL
        //System.out.println("T-------|"+s);
        String valor = s.toString();
        String prim = IDS+",";
        String ult = IDS+",";
        Nodo term = new Nodo(null,null,valor,parser.cont, parser.IDS, "N", prim, ult);
        parser.cont++;
        parser.IDS++;
        RESULT = term;
    :}
    ;

SU ::= KLEEN:k
     {: RESULT = k.toString(); :}
     | S_MAS:m
     {: RESULT = m.toString(); :}
     | S_UNA:u
     {: RESULT = u.toString(); :}
     ;

SD ::= CONCAT:c
     {: RESULT = c.toString(); :}
     | DISYUN:d
     {: RESULT = d.toString(); :}
     ;

TE ::= SIMB:i
    {:
        // METODO DEL ARBOL
        cadenaERnombre += i.toString() + ",";
        RESULT = i.toString(); 
        
    :}
     | STR:s
     {:
        // METODO DEL ARBOL
        String cadena = s.toString(); //"hola"
        int indice = cadena.indexOf("\"",1); 
        String Fcadena = cadena.substring(1,indice);
        cadenaERnombre += Fcadena + ",";
        RESULT = Fcadena; 
     :}
     | LLAVE_A:a VARIABLE:b LLAVE_C:c
     {: 
        // METODO DEL ARBOL
        cadenaERnombre += b.toString() + ",";
        RESULT = b.toString(); 
     :}
     ;




//bloque [TEST DE LAS EXPRESIONES REGULARES EN POLACO]
TESTER ::= TESTER VARIABLE:a DP STR:s PC
            {:
                String cadena = s.toString();
                String Fcadena = cadena.substring(1,cadena.length()-1);
                dbAFD.validarCadena(Fcadena, a.toString());
            :}
         | VARIABLE:v DP STR:t PC
            {:
                String cadenas = t.toString();
                String Fcadenas = cadenas.substring(1,cadenas.length()-1);
                dbAFD.validarCadena(Fcadenas, v.toString());
            :}
         ;