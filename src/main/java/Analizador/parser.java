
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import SIGUIENTES_202103718.*;
import TRANSICIONES_202103718.*;
import AFD_202103718.*;
import edu.usac.olc1.proyecto1.*;
import java_cup.runtime.*;
import java.util.*;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\035\000\002\002\004\000\002\002\003\000\002\003" +
    "\006\000\002\005\012\000\002\005\011\000\002\010\003" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\011\004\000\002\011\003\000\002\004\005\000\002" +
    "\004\004\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\006\010\000\002\006\007\000\002\017\005" +
    "\000\002\017\003\000\002\016\004\000\002\016\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\013\003\000\002\013\003\000\002\015\003\000\002\015" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\102\000\004\005\006\001\002\000\004\002\000\001" +
    "\002\000\004\002\104\001\002\000\004\004\010\001\002" +
    "\000\006\004\042\024\043\001\002\000\004\006\011\001" +
    "\002\000\004\024\012\001\002\000\004\007\013\001\002" +
    "\000\004\010\014\001\002\000\010\022\023\023\020\026" +
    "\017\001\002\000\006\011\ufff7\027\040\001\002\000\004" +
    "\011\037\001\002\000\010\011\ufff2\025\035\027\ufff2\001" +
    "\002\000\010\011\ufff3\025\033\027\ufff3\001\002\000\004" +
    "\011\ufffc\001\002\000\010\022\031\023\030\026\027\001" +
    "\002\000\010\011\ufff4\025\024\027\ufff4\001\002\000\004" +
    "\022\025\001\002\000\004\011\ufffa\001\002\000\006\011" +
    "\ufff8\027\032\001\002\000\006\011\ufff2\027\ufff2\001\002" +
    "\000\006\011\ufff3\027\ufff3\001\002\000\006\011\ufff4\027" +
    "\ufff4\001\002\000\010\022\ufff6\023\ufff6\026\ufff6\001\002" +
    "\000\004\023\034\001\002\000\004\011\ufffb\001\002\000" +
    "\004\026\036\001\002\000\004\011\ufff9\001\002\000\006" +
    "\004\ufffd\024\ufffd\001\002\000\010\022\ufff5\023\ufff5\026" +
    "\ufff5\001\002\000\006\020\076\024\077\001\002\000\004" +
    "\006\070\001\002\000\004\007\044\001\002\000\004\010" +
    "\045\001\002\000\020\005\060\012\055\013\046\014\051" +
    "\016\056\017\057\021\050\001\002\000\020\005\uffe7\012" +
    "\uffe7\013\uffe7\014\uffe7\016\uffe7\017\uffe7\021\uffe7\001\002" +
    "\000\020\005\060\012\055\013\046\014\051\016\056\017" +
    "\057\021\050\001\002\000\022\005\uffe6\011\uffe6\012\uffe6" +
    "\013\uffe6\014\uffe6\016\uffe6\017\uffe6\021\uffe6\001\002\000" +
    "\020\005\uffeb\012\uffeb\013\uffeb\014\uffeb\016\uffeb\017\uffeb" +
    "\021\uffeb\001\002\000\022\005\uffee\011\uffee\012\uffee\013" +
    "\uffee\014\uffee\016\uffee\017\uffee\021\uffee\001\002\000\004" +
    "\011\065\001\002\000\020\005\060\012\055\013\046\014" +
    "\051\016\056\017\057\021\050\001\002\000\020\005\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\016\uffe8\017\uffe8\021\uffe8\001" +
    "\002\000\020\005\uffea\012\uffea\013\uffea\014\uffea\016\uffea" +
    "\017\uffea\021\uffea\001\002\000\020\005\uffe9\012\uffe9\013" +
    "\uffe9\014\uffe9\016\uffe9\017\uffe9\021\uffe9\001\002\000\004" +
    "\024\062\001\002\000\022\005\uffec\011\uffec\012\uffec\013" +
    "\uffec\014\uffec\016\uffec\017\uffec\021\uffec\001\002\000\004" +
    "\020\063\001\002\000\022\005\uffe5\011\uffe5\012\uffe5\013" +
    "\uffe5\014\uffe5\016\uffe5\017\uffe5\021\uffe5\001\002\000\022" +
    "\005\uffed\011\uffed\012\uffed\013\uffed\014\uffed\016\uffed\017" +
    "\uffed\021\uffed\001\002\000\006\020\ufff0\024\ufff0\001\002" +
    "\000\020\005\060\012\055\013\046\014\051\016\056\017" +
    "\057\021\050\001\002\000\022\005\uffef\011\uffef\012\uffef" +
    "\013\uffef\014\uffef\016\uffef\017\uffef\021\uffef\001\002\000" +
    "\004\024\071\001\002\000\004\007\072\001\002\000\004" +
    "\010\073\001\002\000\010\022\023\023\020\026\017\001" +
    "\002\000\004\011\075\001\002\000\006\004\ufffe\024\ufffe" +
    "\001\002\000\004\002\uffff\001\002\000\004\007\100\001" +
    "\002\000\004\010\101\001\002\000\020\005\060\012\055" +
    "\013\046\014\051\016\056\017\057\021\050\001\002\000" +
    "\004\011\103\001\002\000\006\020\ufff1\024\ufff1\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\102\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\006\001\001\000\004" +
    "\006\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\021\010\015" +
    "\011\020\012\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\013\046\014\053\015\060\016\051\017\052\001" +
    "\001\000\002\001\001\000\014\013\046\014\053\015\060" +
    "\016\051\017\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\013\046" +
    "\014\053\015\060\016\051\017\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\013\046\014\053" +
    "\015\060\016\051\017\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\021\010\073\011\020\012\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\013\046\014\053\015\060\016" +
    "\051\017\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public DefConjuntos defC = new DefConjuntos();
    
    // COMPONENTES PARA TABLA DE SIGUIENTES
    public tablaSig objSig = new tablaSig();
    public static String cadenaERnombre = "";

    // COMPONENTES PARA EL ARBOL SINTACTICO
    public static  int cont = 1;
    public static int IDS = 1;
    public static Nodo Raiz;

    public static void graficarArbol(Nodo act, String nombre){
        FileWriter fichero = null;
        PrintWriter pw = null;
        try {
            fichero = new FileWriter("src/main/java/ARBOLES_202103718/" + nombre + ".dot");
            pw = new PrintWriter(fichero);
            pw.println("digraph G{");
            pw.println("rankdir=UD");
            pw.println("node[shape=record]");
            pw.println("concentrate=true");
            pw.println(act.getCodigoInterno());
            pw.println("}");
        } catch (Exception e) {
            System.out.println("error, no se realizo el archivo"+e);
        } finally {
            try {
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
        //para compilar el archivo dot y obtener la imagen
        try {
            //dirección doonde se ecnuentra el compilador de graphviz
            String dotPath = "C:\\Program Files\\Graphviz\\bin\\dot.exe";
            //dirección del archivo dot
            String fileInputPath = "src/main/java/ARBOLES_202103718/" + nombre + ".dot";
            //dirección donde se creara la magen
            String fileOutputPath = "src/main/java/ARBOLES_202103718/" + nombre + ".jpg";
            //tipo de conversón
            String tParam = "-Tjpg";
            String tOParam = "-o";

            String[] cmd = new String[5];
            cmd[0] = dotPath;
            cmd[1] = tParam;
            cmd[2] = fileInputPath;
            cmd[3] = tOParam;
            cmd[4] = fileOutputPath;

            Runtime rt = Runtime.getRuntime();

            rt.exec(cmd);

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= BODY 
            {
              Object RESULT =null;
		 
            dbAFD.returnAFD();
            System.out.println(" \nya salio :) \n---------->\n"); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BODY ::= LLAVE_A DEFCONJS DEFER LLAVE_C 
            {
              Object RESULT =null;
		
                parser.defC.DefinicionDeConjuntos();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BODY",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DEFCONJS ::= DEFCONJS NCONJ DP VARIABLE GUION MAYOR NOTACION PC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String c = b.toString(); parser.defC.add(a,c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFCONJS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DEFCONJS ::= NCONJ DP VARIABLE GUION MAYOR NOTACION PC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String c = b.toString(); parser.defC.add(a,c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFCONJS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NOTACION ::= NOTACIONCONV 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; System.out.println(n.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NOTACION ::= LETMIN TILDE LETMIN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a.toString()+b.toString()+c.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NOTACION ::= LETMAY TILDE LETMAY 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a.toString()+b.toString()+c.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NOTACION ::= DIG TILDE DIG 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a.toString()+b.toString()+c.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NOTACIONCONV ::= AUXCONV LETRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 String res = a.toString()+c.toString(); 
                 RESULT = res;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACIONCONV",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NOTACIONCONV ::= LETRA 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                RESULT = l.toString(); 
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACIONCONV",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // AUXCONV ::= AUXCONV LETRA COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a.toString()+b.toString()+c.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUXCONV",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // AUXCONV ::= LETRA COMA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b.toString()+c.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUXCONV",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LETRA ::= LETMAY 
            {
              Object RESULT =null;
		int lyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ly = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ly.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LETRA",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LETRA ::= LETMIN 
            {
              Object RESULT =null;
		int lnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ln = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ln.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LETRA",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LETRA ::= DIG 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LETRA",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DEFER ::= DEFER VARIABLE GUION MAYOR ER PC 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            String prim = IDS+"";
            String ult = IDS+"";
            String prime;
            String ulti;
            Nodo nuevofinal = new Nodo(null, null, "#", parser.cont, parser.IDS, "N", prim, ult);
            parser.objSig.addElementH(nuevofinal.getPrimero(), "-");

            parser.cont++;
            if (valor.getAnulable().equals("A")){
                prime = valor.getPrimero() + ult;
            }else{
                prime = valor.getPrimero();
            }
            ulti = nuevofinal.getUltimo();
            Nodo nuevaraiz = new Nodo(valor, nuevofinal, ".", parser.cont, 0, "N", prime,ulti);
            parser.Raiz = nuevaraiz;
            graficarArbol(nuevaraiz, nombre);
            IDS = 1;

            //TABLA DE SIGUIENTES------------------------------>
            parser.objSig.addElementH(nuevaraiz.getHizq().getUltimo(), nuevaraiz.getHder().getPrimero());
            cadenaERnombre += "#,";
            System.out.println("ARRIBA: "+cadenaERnombre);
            parser.objSig.Graphviz(cadenaERnombre, nombre);
            //------------------------------------------------->

            //TABLA DE TRANSICIONES---------------------------->
            dbTablaTransicion TT = new dbTablaTransicion();
            parser.objSig.asignacionTablaTransiciones(TT, cadenaERnombre);
            TT.TablaTransiciones(nuevaraiz.getPrimero(), nombre);
            //------------------------------------------------->

            //CREACION OBJ AFD--------------------------------->
            List<String> statusA =  TT.estadosDeAceptacion();
            Map<String, List<String[]>> transitions = TT.modificacionTransiciones();
            HashMap<String, List<String>> conjunts = parser.defC.DefinicionDeConjuntos();
            AFD objAFD = new AFD(nombre, "S0", statusA, transitions);
            objAFD.setConjuntos(conjunts);
            dbAFD.InsertAFD(objAFD);
            //-------------------------------------------------->

            //-----------------REINICIO DE VARIABLES-----------------
            //SIGUIENTES
            cadenaERnombre = "";
            parser.objSig.limpiarMap();
            //TRANSICIONES
            TT.limipiarMap_t();
            
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFER",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DEFER ::= VARIABLE GUION MAYOR ER PC 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo valor = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            String prim = IDS+"";
            String ult = IDS+"";
            String prime;
            String ulti;
            Nodo nuevofinal = new Nodo(null, null, "#", parser.cont, parser.IDS, "N", prim, ult);
            parser.objSig.addElementH(nuevofinal.getPrimero(), "-");

            parser.cont++;
            if (valor.getAnulable().equals("A")){
                prime = valor.getPrimero() + ult;
            }else{
                prime = valor.getPrimero();
            }
            ulti = nuevofinal.getUltimo();
            Nodo nuevaraiz = new Nodo(valor, nuevofinal, ".", parser.cont, 0, "N", prime,ulti);
            parser.Raiz = nuevaraiz;
            graficarArbol(nuevaraiz, nombre);
            IDS = 1;

            //TABLA DE SIGUIENTES------------------------------>
            parser.objSig.addElementH(nuevaraiz.getHizq().getUltimo(), nuevaraiz.getHder().getPrimero());
            cadenaERnombre += "#,";
            System.out.println("ABAJO: "+cadenaERnombre);
            parser.objSig.Graphviz(cadenaERnombre, nombre);
            //------------------------------------------------->

            //TABLA DE TRANSICIONES---------------------------->
            dbTablaTransicion TT = new dbTablaTransicion();
            parser.objSig.asignacionTablaTransiciones(TT, cadenaERnombre);
            TT.TablaTransiciones(nuevaraiz.getPrimero(), nombre);
            //------------------------------------------------->

            //CREACION OBJ AFD--------------------------------->
            List<String> statusA =  TT.estadosDeAceptacion();
            Map<String, List<String[]>> transitions = TT.modificacionTransiciones();
            HashMap<String, List<String>> conjunts = parser.defC.DefinicionDeConjuntos();
            AFD objAFD = new AFD(nombre, "S0", statusA, transitions);
            objAFD.setConjuntos(conjunts);
            dbAFD.InsertAFD(objAFD);
            //-------------------------------------------------->
            
            //-----------------REINICIO DE VARIABLES-----------------
            //SIGUIENTES
            cadenaERnombre = "";
            parser.objSig.limpiarMap();
            //TRANSICIONES
            TT.limipiarMap_t();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFER",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ER ::= SD ER ER 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String valor = c.toString();

        // VERIFICA QUE TIPO DE SD ES
        if (valor.equals("|")){
            String an;
            if (a.getAnulable().equals("A") || b.getAnulable().equals("A")){
                an = "A";
            }else{
                an = "N";
            }
            String prim = a.getPrimero() + b.getPrimero();
            String ult = a.getUltimo() + b.getUltimo();
            Nodo dualER = new Nodo(a,b,valor,parser.cont, 0, an, prim, ult);
            parser.cont++;
            RESULT = dualER;

        }
        if (valor.equals(".")){
            String an;
            String prim;
            String ult;

            if (a.getAnulable().equals("A") && b.getAnulable().equals("A")){
                an = "A";
            }else{
                an = "N";
            }
            if (a.getAnulable().equals("A")){
                prim = a.getPrimero() + b.getPrimero();
            }else {
                prim = a.getPrimero();
            }
            if (b.getAnulable().equals("A")){
                ult = a.getUltimo() + b.getUltimo();
            }else {
                ult = b.getUltimo();
            }
            Nodo dualER = new Nodo(a,b,valor,parser.cont, 0, an, prim, ult);
            parser.cont++;

           // TABLA DE SIGUIENTES
            parser.objSig.addElementH(dualER.getHizq().getUltimo(), dualER.getHder().getPrimero());

            RESULT = dualER;
        }

        //System.out.println("ER--|"+a+c.toString()+b);
        
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ER",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ER ::= T 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ER",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // T ::= SU ER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            // METODO DEL ARBOL
            String valor = a.toString();

            // VERIFICA QUE TIPO DE SU ES
            if (valor.equals("+")){                
                String prim = b.getPrimero();
                String ult = b.getUltimo();
                Nodo indER = new Nodo(b,null,valor,parser.cont, 0, "N", prim, ult);
                parser.cont++;

                //TABLA DE SIGUIENTES
                parser.objSig.addElementH(indER.getHizq().getPrimero(), indER.getHizq().getUltimo());

                RESULT = indER;
            }
            if (valor.equals("*")){
                String prim = b.getPrimero();
                String ult = b.getUltimo();
                Nodo indER = new Nodo(b,null,valor,parser.cont, 0, "A", prim, ult);
                parser.cont++;

                // TABLA DE SIGUIENTES
                /*System.out.println("-----Siguientes "+valor+">  \n"+ "Asignaran a: ");
                System.out.println(indER.getHizq().getPrimero());
                System.out.println("los valores:");
                System.out.println(indER.getHizq().getUltimo());*/
                parser.objSig.addElementH(indER.getHizq().getPrimero(), indER.getHizq().getUltimo());

                RESULT = indER;
            }
            if (valor.equals("?")){
                String prim = b.getPrimero();
                String ult = b.getUltimo();
                Nodo indER = new Nodo(b,null,valor,parser.cont, 0, "A", prim, ult);
                parser.cont++;
                RESULT = indER;
            }
            //System.out.println("T ER|"+a+b.getValor());
            
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // T ::= TE 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        // METODO DEL ARBOL
        //System.out.println("T-------|"+s);
        String valor = s.toString();
        String prim = IDS+",";
        String ult = IDS+",";
        Nodo term = new Nodo(null,null,valor,parser.cont, parser.IDS, "N", prim, ult);
        parser.cont++;
        parser.IDS++;
        RESULT = term;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SU ::= KLEEN 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object k = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = k.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SU",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SU ::= S_MAS 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = m.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SU",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SU ::= S_UNA 
            {
              String RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = u.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SU",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SD ::= CONCAT 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SD",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SD ::= DISYUN 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SD",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TE ::= STR 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        // METODO DEL ARBOL
        String cadena = s.toString(); //"hola"
        int indice = cadena.indexOf("\"",1); 
        String Fcadena = cadena.substring(1,indice);
        cadenaERnombre += Fcadena + ",";
        RESULT = Fcadena; 
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TE ::= LLAVE_A VARIABLE LLAVE_C 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        // METODO DEL ARBOL
        cadenaERnombre += b.toString() + ",";
        RESULT = b.toString(); 
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
